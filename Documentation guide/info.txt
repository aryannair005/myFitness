# Fitness Tracker - Complete Project Documentation

##  Project Overview

**Fitness Tracker** is a comprehensive full-stack web application built for creating, managing, and tracking workout routines with integrated calorie management and detailed food logging. The app allows users to create custom workout splits, add exercises with detailed parameters, use an interactive timer during workouts, calculate personalized daily calorie needs, and track their daily food intake with detailed macro analysis.

###  Key Features
- User authentication (registration, login, logout)
- Create custom workout splits with multiple exercises
- Exercise autocomplete with suggested common exercises
- Interactive workout timer with rest periods
- Calorie maintenance calculator with BMR and TDEE calculations
- Personalized calorie targets for weight loss, maintenance, and muscle gain
- **NEW: Complete food logging system with macro tracking**
- **NEW: FatSecret API integration for comprehensive food database**
- **NEW: Daily food diary with meal organization**
- **NEW: Weekly nutrition analytics with charts**
- **NEW: Real-time macro goal tracking**
- Progress tracking and workout history
- Responsive design for mobile and desktop

###  Technology Stack
- **Backend**: Node.js, Express.js
- **Database**: MongoDB with Mongoose ODM
- **Frontend**: EJS templating, Bootstrap 5, Vanilla JavaScript
- **Authentication**: bcryptjs for password hashing, express-session
- **API Integration**: FatSecret Platform API with OAuth 1.0
- **Charts**: Chart.js for nutrition analytics
- **Styling**: Custom CSS + Bootstrap 5

---

##  Architecture & Design Patterns

### MVC (Model-View-Controller) Pattern
The application follows the MVC architectural pattern:

- **Models** (`/models/`): Define data structures and database schemas
- **Views** (`/views/`): Handle presentation layer with EJS templates
- **Controllers** (`/routes/`): Manage application logic and user interactions
- **Services** (`/services/`): Handle external API integrations and business logic

### File Structure
```
fitness-tracker/
├── server.js              # Main server file (UPDATED)
├── package.json           # Dependencies and scripts
├── .env                   # Environment variables (UPDATED)
├── .env.example           # Environment template (NEW)
├── models/
│   ├── User.js           # User schema with auth methods
│   ├── Workout.js        # Workout and exercise schemas
│   ├── CalorieProfile.js # User calorie profile and calculations
│   └── FoodEntry.js      # NEW: Food logging with nutrition data
├── routes/
│   ├── auth.js           # Authentication routes
│   ├── workouts.js       # Workout CRUD operations
│   ├── calories.js       # Calorie calculator routes
│   └── food.js           # NEW: Food logging and nutrition routes
├── services/             # NEW: External API services
│   └── FatSecretService.js # NEW: FatSecret API integration
├── views/
│   ├── layouts/          # Layout templates
│   ├── partials/         # Reusable components (navbar updated)
│   ├── auth/             # Login and registration pages
│   ├── workouts/         # Workout management pages
│   ├── calories/         # Calorie calculator pages
│   └── food/             # NEW: Food logging pages
│       ├── diary.ejs     # NEW: Daily food diary
│       ├── add.ejs       # NEW: Add food with search
│       └── weekly.ejs    # NEW: Weekly nutrition summary
└── public/
    ├── css/style.css     # Custom styling
    └── js/               # Client-side JavaScript
```

---

##  Database Schema

### User Model
```javascript
{
  username: String (required, unique),
  email: String (required, unique, lowercase),
  password: String (required, hashed),
  createdAt: Date
}
```

### Workout Model
```javascript
{
  name: String (required),
  userId: ObjectId (ref: User),
  exercises: [ExerciseSchema],
  totalTime: Number (seconds),
  completed: Boolean,
  createdAt: Date,
  completedAt: Date
}
```

### Exercise Schema (embedded)
```javascript
{
  name: String (required),
  sets: Number (default: 3),
  reps: Number (default: 10),
  weight: Number (default: 0),
  restTime: Number (default: 60 seconds)
}
```

### CalorieProfile Model
```javascript
{
  userId: ObjectId (ref: User, unique),
  age: Number (13-120),
  gender: String (enum: ['male', 'female']),
  height: Number (100-250 cm),
  weight: Number (30-300 kg),
  activityLevel: String (enum: activity levels),
  bmr: Number (calculated),
  maintenanceCalories: Number (calculated),
  deficitCalories: Number (calculated),
  surplusCalories: Number (calculated),
  lastCalculated: Date,
  createdAt: Date
}
```

### **NEW: FoodEntry Model**
```javascript
{
  userId: ObjectId (ref: User),
  date: Date (required),
  meal: String (enum: ['breakfast', 'lunch', 'dinner', 'snack']),
  foodId: String (FatSecret food ID),
  foodName: String (required),
  servingId: String (FatSecret serving ID),
  servingDescription: String (required),
  numberOfServings: Number (min: 0.1),
  calories: Number (required),
  carbs: Number (required),
  protein: Number (required),
  fat: Number (required),
  fiber: Number (default: 0),
  sugar: Number (default: 0),
  sodium: Number (default: 0),
  createdAt: Date,
  updatedAt: Date
}
```

---

##  **NEW: FatSecret API Integration**

### FatSecretService Class
A comprehensive service class that handles all FatSecret Platform API interactions:

#### Authentication
- **OAuth 1.0**: Implements complete OAuth 1.0 signature generation
- **HMAC-SHA1**: Secure request signing for API authentication
- **Dynamic Parameters**: Handles nonce generation and timestamps

#### Core Methods
```javascript
// Search for foods in the database
async searchFoods(searchExpression, maxResults = 20)

// Get detailed food information including all servings
async getFoodDetails(foodId)

// Get autocomplete suggestions for faster search
async getAutocompleteSuggestions(expression)

// Internal signature generation and HTTP request handling
generateSignature(method, url, params)
makeRequest(params)
```

#### Key Features
- **Error Handling**: Comprehensive error catching and user-friendly messages
- **Response Parsing**: Handles both single items and arrays from API
- **Data Formatting**: Converts API responses to application-friendly format
- **Rate Limiting**: Respects API rate limits and handles failures gracefully

### API Credentials Management
```javascript
// Environment variables for secure credential storage
FATSECRET_CONSUMER_KEY=3be30f279f204c47bc46639debbe4e2e
FATSECRET_CONSUMER_SECRET=9f515e5ca74b443fa4b2b625605e1b55
```

---

##  Authentication System

### Security Features
- **Password Hashing**: Uses bcryptjs with salt rounds
- **Session Management**: Express-session with secure cookies
- **Route Protection**: Middleware checks for authenticated users
- **Input Validation**: Basic form validation on client and server
- **API Security**: OAuth 1.0 for external API calls

### Auth Flow
1. User registers → Password hashed → Session created
2. User logs in → Password compared → Session established
3. Protected routes check session → Redirect if not authenticated
4. Logout destroys session

---

##  Core Functionality

### 1. Workout Creation & Management
- **Exercise Autocomplete**: Dropdown suggests from 50+ common exercises
- **Dynamic Forms**: Add/remove exercises with real-time form generation
- **Exercise Parameters**: Sets, reps, weight, rest time for each exercise
- **Form Validation**: Required fields and number constraints

### 2. Workout Timer System
The timer system manages multiple concurrent states:

#### Timer States
- **Stopped**: Initial state, ready to start
- **Running**: Workout timer counting up
- **Paused**: Timer stopped but can resume
- **Resting**: Between-set rest period countdown

#### Timer Features
- **Main Timer**: Tracks total workout duration
- **Exercise Progress**: Shows current exercise and set
- **Rest Timer**: Countdown between sets with skip option
- **Visual Progress**: Progress bar showing workout completion
- **Exercise Navigation**: Highlights current/completed exercises

### 3. Calorie Calculator System
Science-based nutrition guidance system:

#### Calculation Engine
- **BMR Calculation**: Uses Mifflin-St Jeor equation for accuracy
  - Male: BMR = (10 × weight) + (6.25 × height) - (5 × age) + 5
  - Female: BMR = (10 × weight) + (6.25 × height) - (5 × age) - 161
- **TDEE Calculation**: BMR × Activity Factor
- **Activity Multipliers**:
  - Sedentary: 1.2x (little/no exercise)
  - Lightly Active: 1.375x (light exercise 1-3 days/week)
  - Moderately Active: 1.55x (moderate exercise 3-5 days/week)
  - Very Active: 1.725x (hard exercise 6-7 days/week)
  - Extra Active: 1.9x (very hard exercise + physical job)

#### Calorie Targets
- **Maintenance**: TDEE (maintain current weight)
- **Weight Loss**: TDEE - 500 calories (≈0.5kg/week loss)
- **Muscle Gain**: TDEE + 300 calories (lean muscle growth)

### **4. NEW: Complete Food Logging System**

#### Daily Food Diary
- **Meal Organization**: Breakfast, lunch, dinner, and snacks
- **Macro Tracking**: Real-time calories, carbs, protein, fat tracking
- **Goal Integration**: Progress bars showing macro targets vs actual intake
- **Date Navigation**: View any day's food log
- **Quick Actions**: Easy add/delete food entries

#### Food Search & Addition
- **Real-time Search**: Instant food database search via FatSecret API
- **Autocomplete**: Smart suggestions as user types
- **Detailed Nutrition**: Complete macro and micronutrient information
- **Flexible Servings**: Multiple serving sizes with automatic calculation
- **Portion Control**: Decimal serving amounts (e.g., 1.5 cups)

#### Weekly Analytics
- **Trend Analysis**: 7-day nutrition trends with interactive charts
- **Goal Comparison**: Weekly averages vs daily targets
- **Visual Insights**: Charts showing daily calories and macro breakdown
- **Progress Tracking**: Week-over-week nutrition improvements

#### Nutrition Intelligence
- **Macro Goals**: Automatic calculation based on calorie profile
  - Protein: ~1.6g per kg body weight
  - Carbs: ~45% of total calories
  - Fat: ~30% of total calories
- **Visual Progress**: Color-coded progress bars for each macro
- **Smart Recommendations**: Tips based on current intake patterns

---

##  **NEW: Food Logging User Experience**

### Search & Add Flow
1. **Access**: Click "Add" for any meal in the diary
2. **Search**: Type food name with real-time suggestions
3. **Select**: Choose from search results
4. **Configure**: Select serving size and quantity
5. **Preview**: See nutrition breakdown before adding
6. **Confirm**: Add to meal with one click

### Daily Diary Interface
- **Meal Sections**: Organized cards for each meal type
- **Macro Summary**: Top-level daily progress display
- **Quick Stats**: Calories and macros for each meal
- **Easy Management**: Delete entries with confirmation
- **Goal Integration**: Shows progress toward calorie profile targets

### Weekly Analytics Dashboard
- **Overview Cards**: Weekly totals and daily averages
- **Daily Breakdown**: Detailed table with all 7 days
- **Interactive Charts**: 
  - Line chart for daily calorie trends
  - Bar chart for macro comparisons
- **Goal Tracking**: Compare actual vs target nutrition
- **Navigation**: Easy access to specific days

---

##  Frontend Architecture

### JavaScript Modules

#### 1. `main.js`
Global utilities and initialization code.

#### 2. `workout-creator.js`
Handles the dynamic workout creation interface:
- **Exercise Addition**: Dynamically creates form fields
- **Autocomplete System**: Filters and displays exercise suggestions
- **Form Management**: Add/remove exercises, form validation
- **Event Handling**: Click outside to hide suggestions

#### 3. `workout-timer.js`
Manages the complex workout timer functionality:
- **Timer Management**: Start, pause, resume, reset functionality
- **Exercise Flow**: Navigate through exercises and sets
- **Rest Periods**: Automatic rest timers with skip option
- **Progress Tracking**: Visual feedback and completion status
- **Data Persistence**: Send workout completion data to server

#### **4. NEW: Food Search JavaScript (Inline)**
Integrated into the add food page for seamless user experience:
- **Real-time Search**: Debounced API calls to prevent spam
- **Autocomplete UI**: Dynamic dropdown with click selection
- **Nutrition Calculator**: Real-time macro calculation based on servings
- **Form State Management**: Complex form state for nutrition data
- **Error Handling**: User-friendly error messages and loading states

### CSS Design System
- **Bootstrap 5**: Core responsive framework
- **Custom Variables**: Consistent colors and spacing
- **Component Styling**: Cards, buttons, forms with custom touches
- **Responsive Design**: Mobile-first approach with breakpoints
- **Interactive Elements**: Hover effects, transitions, visual feedback
- **Food UI Components**: 
  - Search result dropdowns
  - Nutrition display cards
  - Progress bars with color coding
  - Meal organization cards
  - Chart container styling

---

##  API Routes & Endpoints

### Authentication Routes (`/auth`)
- `GET /auth/login` - Display login form
- `POST /auth/login` - Process login credentials
- `GET /auth/register` - Display registration form
- `POST /auth/register` - Create new user account
- `POST /auth/logout` - Destroy user session

### Workout Routes (`/workouts`)
- `GET /workouts` - Dashboard with user's workouts
- `GET /workouts/create` - Workout creation form
- `POST /workouts/create` - Save new workout
- `GET /workouts/:id` - View specific workout details
- `POST /workouts/:id/start` - Launch workout timer
- `POST /workouts/:id/complete` - Mark workout as completed
- `POST /workouts/:id/delete` - Remove workout

### Calorie Routes (`/calories`)
- `GET /calories` - Calorie calculator form
- `POST /calories/calculate` - Calculate and save calorie profile
- `GET /calories/results` - View saved calorie results
- `POST /calories/update` - Update weight and recalculate

### **NEW: Food Logging Routes (`/food`)**
#### Main Pages
- `GET /food` - Daily food diary (today)
- `GET /food/date/:date` - Food diary for specific date
- `GET /food/add/:meal` - Add food to specific meal
- `GET /food/weekly` - Weekly nutrition summary
- `POST /food/add` - Save new food entry
- `POST /food/delete/:id` - Remove food entry

#### API Endpoints
- `GET /food/api/search?q=query` - Search foods via FatSecret
- `GET /food/api/food/:id` - Get detailed food information
- `GET /food/api/autocomplete?q=query` - Get search suggestions

---

##  **NEW: External API Integration Details**

### FatSecret Platform API
The application integrates with FatSecret's comprehensive food database:

#### API Capabilities
- **Food Search**: Over 1 million foods in database
- **Detailed Nutrition**: Complete macro and micronutrient data
- **Multiple Servings**: Various serving sizes for each food
- **Brand Foods**: Name-brand and restaurant foods included
- **Generic Foods**: Basic food items with standard nutrition

#### Implementation Details
```javascript
// Example API call flow
1. User types "chicken breast"
2. Frontend calls /food/api/search?q=chicken breast
3. Backend calls FatSecret API with OAuth signature
4. FatSecret returns matching foods
5. Backend formats and returns to frontend
6. User selects food
7. Frontend calls /food/api/food/:id for details
8. Backend gets serving information
9. User configures serving and adds to meal
```

#### Error Handling
- **Network Issues**: Graceful fallback with user messaging
- **API Limits**: Rate limit handling with user feedback
- **Invalid Responses**: JSON parsing error handling
- **Search Failures**: Alternative suggestions and retry options

---

##  Configuration & Setup

### Environment Variables
```bash
# Database
MONGODB_URI=mongodb://localhost:27017/fitness-tracker

# Session Security
SESSION_SECRET=your-super-secret-session-key

# FatSecret API Credentials
FATSECRET_CONSUMER_KEY=3be30f279f204c47bc46639debbe4e2e
FATSECRET_CONSUMER_SECRET=9f515e5ca74b443fa4b2b625605e1b55

# Server Configuration
PORT=3000
```

### Dependencies
```json
{
  "express": "^4.18.2",        // Web framework
  "mongoose": "^7.5.0",        // MongoDB ODM
  "ejs": "^3.1.9",             // Templating engine
  "ejs-mate": "^4.0.0",        // EJS layout support
  "express-session": "^1.17.3", // Session management
  "bcryptjs": "^2.4.3",        // Password hashing
  "dotenv": "^16.3.1"          // Environment variables
}
```

### Installation Steps
1. `npm install` - Install dependencies
2. Set up MongoDB (local or cloud)
3. Create `.env` file with all configuration including API keys
4. Create `services/` directory
5. Create `views/food/` directory and files
6. Add all food logging files (models, routes, views, service)
7. Update existing files (server.js, navbar.ejs)
8. `npm run dev` - Start development server

---

## **NEW: Advanced Food Logging Features**

### Nutritional Intelligence
- **Smart Macro Calculation**: Automatic macro goals based on user profile
- **Progress Visualization**: Color-coded progress bars for each nutrient
- **Deficit/Surplus Tracking**: Shows calories above/below target
- **Meal Balance**: Visual feedback on meal macro distribution

### Data Analytics
- **Weekly Trends**: 7-day rolling averages and trends
- **Goal Achievement**: Percentage of days meeting macro targets
- **Pattern Recognition**: Identifies consistent eating patterns
- **Chart Visualization**: Interactive charts using Chart.js

### User Experience Enhancements
- **Keyboard Navigation**: Full keyboard support for search and selection
- **Mobile Optimization**: Touch-friendly interface for mobile food logging
- **Quick Add**: Recently used foods for faster logging
- **Batch Operations**: Add multiple servings or similar foods quickly

---

##  Testing & Quality Assurance

### Manual Testing Checklist
#### Core Features
- [ ] User registration and login flow
- [ ] Workout creation with multiple exercises
- [ ] Exercise autocomplete functionality
- [ ] Timer start, pause, resume, reset operations
- [ ] Rest period functionality and skip option
- [ ] Workout completion and data persistence
- [ ] Calorie calculator form submission
- [ ] BMR and TDEE calculations accuracy
- [ ] Profile saving and updating

#### **NEW: Food Logging Testing**
- [ ] Food search with various query types
- [ ] Search result selection and food details loading
- [ ] Serving size selection and nutrition calculation
- [ ] Food entry saving to correct meal and date
- [ ] Daily diary display with correct totals
- [ ] Macro progress bars showing accurate percentages
- [ ] Food entry deletion and diary updates
- [ ] Date navigation and historical data display
- [ ] Weekly summary calculations and charts
- [ ] Goal comparison accuracy
- [ ] Mobile responsiveness of all food pages
- [ ] Error handling for API failures
- [ ] Form validation for all food inputs

#### **API Integration Testing**
- [ ] FatSecret API authentication and signature generation
- [ ] Food search API calls and response handling
- [ ] Food details API calls and serving data
- [ ] Autocomplete API integration
- [ ] Error handling for API failures
- [ ] Rate limiting and timeout handling

### Code Quality Features
- **Consistent Naming**: Descriptive variable and function names
- **Error Handling**: Try-catch blocks and user-friendly error messages
- **Code Comments**: Explaining complex logic and API integrations
- **Modular Structure**: Separated concerns and reusable components
- **Input Sanitization**: Protection against invalid data
- **Database Indexing**: Optimized queries for food entries
- **API Abstraction**: Clean service layer for external API calls

---

## 🔮 Future Enhancement Ideas

### Nutrition Features
1. **Advanced Analytics**:
   - Monthly nutrition trends and patterns
   - Micronutrient tracking (vitamins, minerals)
   - Meal timing analysis
   - Custom macro ratio goals
   - Nutrient density scoring

2. **Smart Features**:
   - AI-powered meal suggestions based on goals
   - Photo food logging with recognition
   - Barcode scanning for packaged foods
   - Recipe import and nutrition analysis
   - Custom food creation for homemade items

3. **Social & Gamification**:
   - Share meals and recipes with friends
   - Nutrition challenges and achievements
   - Community meal ideas and reviews
   - Progress sharing and motivation

### Integration Enhancements
1. **Additional Food APIs**:
   - USDA FoodData Central integration
   - Nutritionix API for more brand foods
   - Open Food Facts for global products

2. **Wearable Integration**:
   - Sync with fitness trackers for activity calories
   - Apple Health / Google Fit integration
   - Real-time calorie adjustment based on activity

3. **Advanced Calculations**:
   - Body composition integration for better macro goals
   - Metabolic adaptation tracking
   - Performance-based nutrition adjustments

### Technical Improvements
1. **Performance Optimization**:
   - Redis caching for frequently accessed foods
   - Database query optimization with aggregation pipelines
   - Image optimization for food photos
   - Progressive Web App (PWA) features

2. **Data Export & Analysis**:
   - CSV export of nutrition data
   - PDF nutrition reports
   - Integration with health apps
   - Data visualization dashboards

---

##  Learning Outcomes

### Technical Skills Demonstrated
- **Full-Stack Development**: End-to-end application with complex integrations
- **External API Integration**: OAuth 1.0 implementation and secure API calls
- **Database Design**: Complex relationships and data modeling
- **Authentication**: Secure user management and session handling
- **Frontend JavaScript**: Advanced DOM manipulation and async operations
- **Data Visualization**: Chart integration and responsive design
- **Server-Side Architecture**: Service layer pattern and modular design
- **Error Handling**: Comprehensive error management and user feedback
- **Mathematical Computing**: Scientific calculations and data processing

### **Advanced Problem-Solving Examples**
1. **OAuth 1.0 Implementation**: Complex signature generation for API security
2. **Real-time Search**: Debounced API calls with user-friendly loading states
3. **Complex Data Relationships**: User profiles, food entries, and nutrition calculations
4. **Nutrition Intelligence**: Automatic macro goal calculation and progress tracking
5. **Date-based Data Management**: Efficient querying and organization by date
6. **Multi-step Form Flows**: Complex user journeys with state management
7. **API Error Resilience**: Graceful handling of external service failures
8. **Performance Optimization**: Efficient database queries and caching strategies

### **Advanced Concepts Applied**
- **Service-Oriented Architecture**: Clean separation of API logic
- **Data Aggregation**: Complex MongoDB aggregation for analytics
- **Real-time Calculations**: Dynamic nutrition calculations with user input
- **Cross-platform Compatibility**: Responsive design for all devices
- **User Experience Design**: Intuitive interfaces for complex functionality
- **Data Integrity**: Validation at multiple layers (client, server, database)
- **Scalable Architecture**: Modular design supporting future enhancements

---

## 🎯 **Complete Fitness & Nutrition Platform**

This fitness tracker has evolved from a simple workout logger into a comprehensive health and fitness platform. The integration of detailed food logging with macro tracking creates a complete ecosystem for fitness goal achievement.

### **Unique Value Propositions**
1. **All-in-One Platform**: Combines workout planning, calorie calculation, and detailed nutrition tracking
2. **Science-Based**: Uses peer-reviewed equations and evidence-based nutrition guidelines
3. **Real-World Data**: Access to extensive food database through FatSecret API
4. **Goal Integration**: Seamless connection between calorie goals and actual food intake
5. **Progress Visualization**: Comprehensive analytics and trend tracking
6. **User-Friendly**: Complex functionality presented through intuitive interfaces

### **Technical Excellence**
- **Robust Architecture**: Scalable, maintainable codebase with clear separation of concerns
- **External Integrations**: Secure, reliable API integration with comprehensive error handling
- **Data Management**: Efficient database design with optimized queries and relationships
- **User Experience**: Mobile-first responsive design with accessibility considerations
- **Security**: Comprehensive authentication, input validation, and secure API communications

---

This fitness tracker project demonstrates mastery of modern web development practices, from database architecture to external API integration, creating a production-ready application that addresses real user needs in the health and fitness space. The combination of workout planning, calorie calculation, and detailed nutrition tracking provides users with all the tools necessary for achieving their fitness goals through both exercise and proper nutrition.

The technical implementation showcases advanced concepts including OAuth authentication, real-time data processing, complex database relationships, and sophisticated user experience design, making it a comprehensive example of full-stack web development excellence.