<% layout('layouts/boilerplate') %>

<div class="container my-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">
                            <% if (meal === 'breakfast') { %>üåÖ<% } %>
                            <% if (meal === 'lunch') { %>‚òÄÔ∏è<% } %>
                            <% if (meal === 'dinner') { %>üåô<% } %>
                            <% if (meal === 'snack') { %>üçé<% } %>
                            Add <%= meal.charAt(0).toUpperCase() + meal.slice(1) %>
                        </h3>
                        <a href="/food<%= selectedDate !== new Date().toISOString().split('T')[0] ? '/date/' + selectedDate : '' %>" class="btn btn-secondary">Back</a>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Food Search -->
                    <div class="mb-4">
                        <label class="form-label">Search for food</label>
                        <div class="position-relative">
                            <input type="text" id="foodSearch" class="form-control" placeholder="Type to search for foods..." autocomplete="off">
                            <div id="searchResults" class="search-results"></div>
                        </div>
                        <small class="text-muted">Search for foods by name (e.g., "chicken breast", "apple", "rice")</small>
                    </div>

                    <!-- Food Selection Form (Initially Hidden) -->
                    <div id="foodForm" style="display: none;">
                        <form action="/food/add" method="POST">
                            <input type="hidden" name="meal" value="<%= meal %>">
                            <input type="hidden" name="date" value="<%= selectedDate %>">
                            <input type="hidden" name="foodId" id="selectedFoodId">
                            <input type="hidden" name="foodName" id="selectedFoodName">

                            <div class="selected-food-info mb-4 p-3 bg-light rounded">
                                <h5 id="displayFoodName"></h5>
                                <p class="text-muted mb-0" id="displayFoodType"></p>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="servingSelect" class="form-label">Serving Size</label>
                                    <select class="form-select" id="servingSelect" name="servingId" required onchange="updateNutrition()">
                                        <option value="">Choose serving size...</option>
                                    </select>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="numberOfServings" class="form-label">Number of Servings</label>
                                    <input type="number" class="form-control" id="numberOfServings" name="numberOfServings" 
                                           value="1" min="0.1" step="0.1" required onchange="updateNutrition()">
                                </div>
                            </div>

                            <!-- Hidden nutrition inputs -->
                            <input type="hidden" name="servingDescription" id="servingDescription">
                            <input type="hidden" name="calories" id="nutritionCalories">
                            <input type="hidden" name="carbs" id="nutritionCarbs">
                            <input type="hidden" name="protein" id="nutritionProtein">
                            <input type="hidden" name="fat" id="nutritionFat">
                            <input type="hidden" name="fiber" id="nutritionFiber">
                            <input type="hidden" name="sugar" id="nutritionSugar">
                            <input type="hidden" name="sodium" id="nutritionSodium">

                            <!-- Nutrition Display -->
                            <div class="nutrition-display mt-4 p-3 border rounded">
                                <h6>Nutrition Information</h6>
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value" id="displayCalories">0</span>
                                            <small class="text-muted d-block">Calories</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value text-success" id="displayCarbs">0g</span>
                                            <small class="text-muted d-block">Carbs</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value text-info" id="displayProtein">0g</span>
                                            <small class="text-muted d-block">Protein</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value text-warning" id="displayFat">0g</span>
                                            <small class="text-muted d-block">Fat</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row text-center mt-3" id="extraNutrition" style="display: none;">
                                    <div class="col-md-4">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value" id="displayFiber">0g</span>
                                            <small class="text-muted d-block">Fiber</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value" id="displaySugar">0g</span>
                                            <small class="text-muted d-block">Sugar</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="nutrition-item">
                                            <span class="nutrition-value" id="displaySodium">0mg</span>
                                            <small class="text-muted d-block">Sodium</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-secondary" onclick="resetForm()">Search Again</button>
                                <button type="submit" class="btn btn-success" id="addFoodBtn">Add to <%= meal.charAt(0).toUpperCase() + meal.slice(1) %></button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #ddd;
    border-top: none;
    max-height: 300px;
    overflow-y: auto;
    z-index: 1000;
    display: none;
}

.search-result-item {
    padding: 12px 15px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
}

.search-result-item:hover {
    background-color: #f8f9fa;
}

.search-result-item:last-child {
    border-bottom: none;
}

.nutrition-item {
    padding: 10px;
    margin: 5px 0;
}

.nutrition-value {
    font-size: 1.2rem;
    font-weight: 600;
}

.selected-food-info {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
}

#foodSearch:focus + .search-results {
    display: block;
}

.loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

<script>
let searchTimeout;
let selectedFoodData = null;
let currentServings = [];

document.getElementById('foodSearch').addEventListener('input', function() {
    const query = this.value.trim();
    
    if (query.length < 2) {
        hideSearchResults();
        return;
    }

    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
        searchFoods(query);
    }, 500);
});

async function searchFoods(query) {
    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '<div class="p-3 text-center"><div class="loading-spinner"></div> Searching...</div>';
    resultsDiv.style.display = 'block';

    try {
        const response = await fetch(`/food/api/search?q=${encodeURIComponent(query)}`);
        const data = await response.json();

        if (data.foods && data.foods.length > 0) {
            let html = '';
            data.foods.forEach(food => {
                html += `
                    <div class="search-result-item" onclick="selectFood('${food.id}', '${food.name.replace(/'/g, "\\'")}', '${food.type || 'Generic'}')">
                        <strong>${food.name}</strong>
                        <br><small class="text-muted">${food.description || food.type || ''}</small>
                    </div>
                `;
            });
            resultsDiv.innerHTML = html;
        } else {
            resultsDiv.innerHTML = '<div class="p-3 text-muted text-center">No foods found. Try a different search term.</div>';
        }
    } catch (error) {
        console.error('Search error:', error);
        resultsDiv.innerHTML = '<div class="p-3 text-danger text-center">Search failed. Please try again.</div>';
    }
}

async function selectFood(foodId, foodName, foodType) {
    hideSearchResults();
    
    try {
        const response = await fetch(`/food/api/food/${foodId}`);
        const foodData = await response.json();
        
        selectedFoodData = foodData;
        currentServings = foodData.servings || [];
        
        // Update form
        document.getElementById('selectedFoodId').value = foodId;
        document.getElementById('selectedFoodName').value = foodName;
        document.getElementById('displayFoodName').textContent = foodName;
        document.getElementById('displayFoodType').textContent = foodType;
        
        // Populate serving options
        const servingSelect = document.getElementById('servingSelect');
        servingSelect.innerHTML = '<option value="">Choose serving size...</option>';
        
        currentServings.forEach(serving => {
            const option = document.createElement('option');
            option.value = serving.id;
            option.textContent = serving.description;
            option.dataset.calories = serving.calories;
            option.dataset.carbs = serving.carbohydrate;
            option.dataset.protein = serving.protein;
            option.dataset.fat = serving.fat;
            option.dataset.fiber = serving.fiber;
            option.dataset.sugar = serving.sugar;
            option.dataset.sodium = serving.sodium;
            servingSelect.appendChild(option);
        });
        
        // Show form
        document.getElementById('foodSearch').value = foodName;
        document.getElementById('foodForm').style.display = 'block';
        
    } catch (error) {
        console.error('Error getting food details:', error);
        alert('Failed to load food details. Please try again.');
    }
}

function updateNutrition() {
    const servingSelect = document.getElementById('servingSelect');
    const numberOfServings = parseFloat(document.getElementById('numberOfServings').value) || 1;
    const selectedOption = servingSelect.selectedOptions[0];
    
    if (!selectedOption || !selectedOption.value) {
        return;
    }
    
    const baseCalories = parseFloat(selectedOption.dataset.calories) || 0;
    const baseCarbs = parseFloat(selectedOption.dataset.carbs) || 0;
    const baseProtein = parseFloat(selectedOption.dataset.protein) || 0;
    const baseFat = parseFloat(selectedOption.dataset.fat) || 0;
    const baseFiber = parseFloat(selectedOption.dataset.fiber) || 0;
    const baseSugar = parseFloat(selectedOption.dataset.sugar) || 0;
    const baseSodium = parseFloat(selectedOption.dataset.sodium) || 0;
    
    // Calculate totals
    const totalCalories = Math.round(baseCalories * numberOfServings);
    const totalCarbs = Math.round((baseCarbs * numberOfServings) * 10) / 10;
    const totalProtein = Math.round((baseProtein * numberOfServings) * 10) / 10;
    const totalFat = Math.round((baseFat * numberOfServings) * 10) / 10;
    const totalFiber = Math.round((baseFiber * numberOfServings) * 10) / 10;
    const totalSugar = Math.round((baseSugar * numberOfServings) * 10) / 10;
    const totalSodium = Math.round(baseSodium * numberOfServings);
    
    // Update display
    document.getElementById('displayCalories').textContent = totalCalories;
    document.getElementById('displayCarbs').textContent = totalCarbs + 'g';
    document.getElementById('displayProtein').textContent = totalProtein + 'g';
    document.getElementById('displayFat').textContent = totalFat + 'g';
    document.getElementById('displayFiber').textContent = totalFiber + 'g';
    document.getElementById('displaySugar').textContent = totalSugar + 'g';
    document.getElementById('displaySodium').textContent = totalSodium + 'mg';
    
    // Update hidden inputs
    document.getElementById('servingDescription').value = selectedOption.textContent;
    document.getElementById('nutritionCalories').value = totalCalories;
    document.getElementById('nutritionCarbs').value = totalCarbs;
    document.getElementById('nutritionProtein').value = totalProtein;
    document.getElementById('nutritionFat').value = totalFat;
    document.getElementById('nutritionFiber').value = totalFiber;
    document.getElementById('nutritionSugar').value = totalSugar;
    document.getElementById('nutritionSodium').value = totalSodium;
    
    // Show extra nutrition if any values exist
    if (totalFiber > 0 || totalSugar > 0 || totalSodium > 0) {
        document.getElementById('extraNutrition').style.display = 'block';
    }
    
    // Enable add button
    document.getElementById('addFoodBtn').disabled = false;
}

function hideSearchResults() {
    document.getElementById('searchResults').style.display = 'none';
}

function resetForm() {
    document.getElementById('foodSearch').value = '';
    document.getElementById('foodForm').style.display = 'none';
    selectedFoodData = null;
    currentServings = [];
    hideSearchResults();
}

// Hide search results when clicking outside
document.addEventListener('click', function(event) {
    const searchContainer = event.target.closest('.position-relative');
    if (!searchContainer) {
        hideSearchResults();
    }
});
</script>